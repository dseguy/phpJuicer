<?php

$codePath = $argv[1];
$outPath = $argv[2];

print "Scanning code in $codePath, storing in $outPath.sqlite\n";

include 'Extractor.php';
include 'Storage.php';
include 'Vcs.php';

$storage = new Storage($outPath.'.sqlite');
$storage->init();

$vcs = new Vcs($codePath);

$componentId = $storage->save('components', 'slimphp');
$versions = $vcs->getVersions();

foreach($versions as $version) {
    print "$version\n";
    $versionId = $storage->save('releases', $version, $componentId);
    
    $files = $vcs->checkOut($version);
    $extractor = new Extractor();
    foreach($files as $file) {
        $extractor->processFile($file);
    }
    
    $namespaces = array();
    foreach($extractor->get('Namespace') as $namespace) {
        $namespaces[$namespace] = $storage->save('namespaces', $namespace, $versionId);
    }
    
    $classesId = array();
    foreach($extractor->get('Class') as $namespace => $classes) {
        foreach($classes as $class) {
            $classesId[$namespace.'\\'.$class] = $storage->save('classes', $class, $namespaces[$namespace]);
        }
    }

    $interfacesId = array();
    foreach($extractor->get('Interface') as $namespace => $interfaces) {
        foreach($interfaces as $interface) {
            $interfacesId[$namespace.'\\'.$interface] = $storage->save('interfaces', $interface, $namespaces[$namespace]);
        }
    }

    $traitsId = array();
    foreach($extractor->get('Trait') as $namespace => $traits) {
        foreach($traits as $trait) {
            $traitsId[$namespace.'\\'.$trait] = $storage->save('traits', $trait, $namespaces[$namespace]);
        }
    }
}

?>